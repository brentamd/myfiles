#!/usr/bin/env python3

import unittest
import subprocess
import amulet


class TestDeploy(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        time = 2500

        d = amulet.Deployment(series="trusty")
        d.add('mongodb')
        d.add('ceilometer', 'cs:trusty/ceilometer')
        d.relate('mongodb:database', 'ceilometer:shared-db')
        d.expose('mongodb')

        try:
            d.setup(time)
            d.sentry.wait(time)
        except amulet.helpers.TimeoutError:
            amulet.raise_status(amulet.FAIL, msg="Environment standup timeout")
        except:
            raise

        cls.mongo = d.sentry['mongodb/0']
        cls.ceilometer = d.sentry['ceilometer/0']
        cls.deployment = d

    def test_mongo_relation(self):
        """Test that ceilometer config contains mongo host address"""
        mongo_private_address, _ = self.mongo.run('unit-get private-address')
        conf = self.ceilometer.file_contents('/etc/ceilometer/ceilometer.conf')
        self.assertTrue(mongo_private_address in conf)

    def test_port_change(self):
        """Test that mongo can be reached on its configured port"""
        host = self.mongo.info['public-address']
        netcat = 'nc {} {} </dev/null'

        def check_port(port):
            self.deployment.configure('mongodb', {'port': port})
            self.deployment.sentry.wait()
            return subprocess.call(netcat.format(host, port), shell=True)

        self.assertEqual(0, check_port(55555))
        self.assertEqual(0, check_port(27017))


if __name__ == '__main__':
    unittest.main()
